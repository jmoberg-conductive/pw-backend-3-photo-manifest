const { QUERY_TYPES } = require('./query.types');

const QUERY_BUILDER_MAPPINGS = {
  // WorkOrders
  [QUERY_TYPES.RESET_ALL_BLACKOUT_FLAGS_BY_PROJECT_ID]: ({ projectId }) => `UPDATE WorkOrder SET workOrderIsInBlackOut = false WHERE WorkOrder.projectId = '${projectId}';`,
  [QUERY_TYPES.SET_BLACKOUT_FLAGS_BY_PROJECT_ID_AND_DATE]: ({ projectId, date }) => `UPDATE WorkOrder RIGHT JOIN BlackOut on billingCycleCode = blackOutCriteriaValue SET workOrderIsInBlackOut = true WHERE WorkOrder.projectId = '${projectId}' AND BlackOut.projectId = '${projectId}' AND '${date}' between blackOutStart and blackOutEnd;`,

  // Reports
  [QUERY_TYPES.GET_EXCEPTION_REPORT_DATA]: ({ projectId, fromDate, toDate }) => `SELECT WorkOrder.workOrderNumber, WorkOrder.workOrderLastVisitDate, WorkOrder.workOrderStatus, WorkOrder.workOrderFlaggedAsCNC, WorkOrder.workOrderFlaggedAs3strike, WorkOrder.workOrderFlaggedAsDamaged, WorkOrder.workOrderFlaggedAsAdHoc, WorkOrder.workOrderFlaggedAsPlated, WorkOrder.workOrderFlaggedAsEscalated, WorkOrder.workOrderIsInBlackOut, WorkOrder.workOrderAttemptNumber, WorkOrder.workOrderReasonCodes, WorkOrder.workOrderSiteConditions, User.userName AS 'technician', Comment.content AS 'comments', Comment.contentDate, WorkOrder.workOrderGroups, WorkOrder.districtCode, WorkOrder.substationCode, WorkOrder.circuitCode, WorkOrder.billingCycleCode, WorkOrder.routeCode, WorkOrder.accountNumber, WorkOrder.customerName, WorkOrder.homePhoneNumber, WorkOrder.mobilePhoneNumber, WorkOrder.businessPhoneNumber, WorkOrder.street, WorkOrder.city, WorkOrder.stateCode, WorkOrder.locationId, WorkOrder.mapNumber, WorkOrder.latitude, WorkOrder.longitude, WorkOrder.capturedGpsPositionSource, WorkOrder.capturedLatitude, WorkOrder.capturedLongitude, WorkOrder.capturedGpsHorizontalAccuracy, capturedGpsVerticalAccuracy, WorkOrder.capturedGpsAltitude, WorkOrderMeterDeploy.oldMeterNumber, WorkOrderMeterDeploy.oldMeterKwLastReading, WorkOrderMeterDeploy.oldMeterKwReading, WorkOrderMeterDeploy.oldMeterKwhLastReading, WorkOrderMeterDeploy.oldMeterKwhReading, WorkOrderMeterDeploy.oldMeterKvaLastReading, WorkOrderMeterDeploy.oldMeterKvaReading, WorkOrderMeterDeploy.oldMeterKvarLastReading, WorkOrderMeterDeploy.oldMeterKvarReading, WorkOrderMeterDeploy.newMeterNumber, WorkOrderMeterDeploy.newMeterAssetNumber as 'assetNumber', WorkOrderMeterDeploy.newMeterKwReading, WorkOrderMeterDeploy.newMeterKwhReading, WorkOrderMeterDeploy.newMeterKvaReading, WorkOrderMeterDeploy.newMeterKvarReading, WorkOrderMeterDeploy.newMeterDial, WorkOrderMeterDeploy.meterReadingDate, WorkOrderMeterDeploy.newMeterReadingDate, WorkOrderMeterDeploy.meterStatus, WorkOrderMeterDeploy.meterType, WorkOrderMeterDeploy.meterClass, WorkOrderMeterDeploy.meterVoltage, WorkOrderMeterDeploy.meterFormFactor, WorkOrderMeterDeploy.billingMultiplier, WorkOrderMeterDeploy.meterReadNotes, WorkOrderMeterDeploy.serviceType, WorkOrderMeterDeploy.serviceDescription, WorkOrderMeterDeploy.ReadSequence, WorkOrderMeterDeploy.isMedical, WorkOrderMeterDeploy.needsOpenDisconnectSwitch, WorkOrderMeterDeploy.hasDisconnectedSwitch, WorkOrderMeterDeploy.meterSetNumber, WorkOrderMeterDeploy.demandCode FROM WorkOrder LEFT JOIN WorkOrderMeterDeploy ON WorkOrder.id = WorkOrderMeterDeploy.workOrderId LEFT JOIN User ON WorkOrder.workOrderResourceUserId = User.id LEFT JOIN Comment ON Comment.workOrderId = WorkOrder.id WHERE (Comment.userId in (select Comment.userId from Comment where WorkOrder.workOrderResourceUserId = Comment.userId) or Comment.content is null) AND WorkOrder.projectId = '${projectId}' AND WorkOrder.workOrderLastVisitDate between '${fromDate}' and '${toDate}' AND (WorkOrder.workOrderFlaggedAs3strike = true OR WorkOrder.workOrderFlaggedAsCNC = true OR WorkOrder.workOrderFlaggedAsDamaged = true OR WorkOrder.workOrderFlaggedAsPlated = true OR WorkOrder.workOrderFlaggedAsAdHoc = true) ORDER BY WorkOrder.workOrderNumber;`,
  [QUERY_TYPES.GET_CONDITION_REPORT_DATA]: ({ projectId, fromDate, toDate }) => `SELECT WorkOrder.workOrderNumber, WorkOrder.workOrderLastVisitDate, WorkOrder.workOrderStatus, WorkOrder.workOrderFlaggedAsCNC, WorkOrder.workOrderFlaggedAs3strike, WorkOrder.workOrderFlaggedAsDamaged, WorkOrder.workOrderFlaggedAsAdHoc, WorkOrder.workOrderFlaggedAsPlated, WorkOrder.workOrderFlaggedAsEscalated, WorkOrder.workOrderIsInBlackOut, WorkOrder.workOrderAttemptNumber, WorkOrder.workOrderReasonCodes, WorkOrder.workOrderSiteConditions, User.userName AS 'technician', Comment.content AS 'comments', Comment.contentDate, WorkOrder.workOrderGroups, WorkOrder.districtCode, WorkOrder.substationCode, WorkOrder.circuitCode, WorkOrder.billingCycleCode, WorkOrder.routeCode, WorkOrder.accountNumber, WorkOrder.customerName, WorkOrder.homePhoneNumber, WorkOrder.mobilePhoneNumber, WorkOrder.businessPhoneNumber, WorkOrder.street, WorkOrder.city, WorkOrder.stateCode, WorkOrder.locationId, WorkOrder.mapNumber, WorkOrder.latitude, WorkOrder.longitude, WorkOrder.capturedGpsPositionSource, WorkOrder.capturedLatitude, WorkOrder.capturedLongitude, WorkOrder.capturedGpsHorizontalAccuracy, capturedGpsVerticalAccuracy, WorkOrder.capturedGpsAltitude, WorkOrderMeterDeploy.oldMeterNumber, WorkOrderMeterDeploy.oldMeterKwLastReading, WorkOrderMeterDeploy.oldMeterKwReading, WorkOrderMeterDeploy.oldMeterKwhLastReading, WorkOrderMeterDeploy.oldMeterKwhReading, WorkOrderMeterDeploy.oldMeterKvaLastReading, WorkOrderMeterDeploy.oldMeterKvaReading, WorkOrderMeterDeploy.oldMeterKvarLastReading, WorkOrderMeterDeploy.oldMeterKvarReading, WorkOrderMeterDeploy.newMeterNumber, WorkOrderMeterDeploy.newMeterAssetNumber as 'assetNumber', WorkOrderMeterDeploy.newMeterKwReading, WorkOrderMeterDeploy.newMeterKwhReading, WorkOrderMeterDeploy.newMeterKvaReading, WorkOrderMeterDeploy.newMeterKvarReading, WorkOrderMeterDeploy.newMeterDial, WorkOrderMeterDeploy.meterReadingDate, WorkOrderMeterDeploy.newMeterReadingDate, WorkOrderMeterDeploy.meterStatus, WorkOrderMeterDeploy.meterType, WorkOrderMeterDeploy.meterClass, WorkOrderMeterDeploy.meterVoltage, WorkOrderMeterDeploy.meterFormFactor, WorkOrderMeterDeploy.billingMultiplier, WorkOrderMeterDeploy.meterReadNotes, WorkOrderMeterDeploy.serviceType, WorkOrderMeterDeploy.serviceDescription, WorkOrderMeterDeploy.ReadSequence, WorkOrderMeterDeploy.isMedical, WorkOrderMeterDeploy.needsOpenDisconnectSwitch, WorkOrderMeterDeploy.hasDisconnectedSwitch, WorkOrderMeterDeploy.meterSetNumber, WorkOrderMeterDeploy.demandCode FROM WorkOrder LEFT JOIN WorkOrderMeterDeploy ON WorkOrder.id = WorkOrderMeterDeploy.workOrderId LEFT JOIN User ON WorkOrder.workOrderResourceUserId = User.id LEFT JOIN Comment ON Comment.workOrderId = WorkOrder.id WHERE (Comment.userId in (select Comment.userId from Comment where WorkOrder.workOrderResourceUserId = Comment.userId) or Comment.content is null) AND WorkOrder.projectId = '${projectId}' AND WorkOrder.workOrderLastVisitDate between '${fromDate}' and '${toDate}' AND WorkOrder.workOrderSiteConditions IS NOT NULL AND WorkOrder.workOrderSiteConditions NOT LIKE '[]';`,
  [QUERY_TYPES.GET_METER_DEPLOY_ASSIGNMENTS_REPORT_DATA]: ({ projectId }) => `SELECT assignments.projectName AS 'Project', assignments.fullName AS 'Technician', assignments.Assigned FROM (SELECT projectName, ProjectUserWorkOrder.userId, User.fullName, COUNT(ProjectUserWorkOrder.userId) AS Assigned FROM ProjectUserWorkOrder LEFT JOIN User ON User.id = ProjectUserWorkOrder.userId LEFT JOIN Project ON Project.id = ProjectUserWorkOrder.projectid LEFT JOIN WorkOrder ON ProjectUserWorkOrder.workOrderId = WorkOrder.id WHERE WorkOrder.projectId = '${projectId}' AND workOrderStatus = 'Assigned' GROUP BY userId) AS assignments LEFT JOIN UserRole ON UserRole.userId = assignments.userId LEFT JOIN Role ON Role.id = UserRole.roleId WHERE role = 'Technician';`,
  [QUERY_TYPES.GET_WATER_METER_DEPLOY_ASSIGNMENTS_REPORT_DATA]: ({ projectId }) => `SELECT projectName, User.fullName, WorkOrderMeterDeploy.meterFormFactor as assetName, 'meter' as assetType, COUNT(ProjectUserWorkOrder.userId) AS quantityAssigned FROM ProjectUserWorkOrder LEFT JOIN User ON User.id = ProjectUserWorkOrder.userId LEFT JOIN Project ON Project.id = ProjectUserWorkOrder.projectid LEFT JOIN WorkOrder ON ProjectUserWorkOrder.workOrderId = WorkOrder.id LEFT JOIN WorkOrderMeterDeploy ON WorkOrderMeterDeploy.workOrderId = WorkOrder.id WHERE WorkOrder.projectId = '${projectId}' AND (workOrderStatus = 'Assigned' or workOrderStatus = 'InProgress') GROUP BY userId, meterFormFactor UNION SELECT projectName, User.fullName, WorkOrderMeterDeploy.meterVoltage as assetName, 'lid' as assetType, COUNT(ProjectUserWorkOrder.userId) AS quantityAssigned FROM ProjectUserWorkOrder LEFT JOIN User ON User.id = ProjectUserWorkOrder.userId LEFT JOIN Project ON Project.id = ProjectUserWorkOrder.projectid LEFT JOIN WorkOrder ON ProjectUserWorkOrder.workOrderId = WorkOrder.id LEFT JOIN WorkOrderMeterDeploy ON WorkOrderMeterDeploy.workOrderId = WorkOrder.id WHERE WorkOrder.projectId = '${projectId}' AND (workOrderStatus = 'Assigned' or workOrderStatus = 'InProgress') GROUP BY userId, meterVoltage order by projectName, fullName, assetType DESC;`
}

const buildQuery = (type) => (data) => QUERY_BUILDER_MAPPINGS[type](data);

module.exports = {
  buildQuery,
  QUERY_BUILDER_MAPPINGS
}